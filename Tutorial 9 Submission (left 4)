1. Write statements for each of the following
a. Write a static method compare that return true if two objects parameter (Student s, Teacher t) are belongs to the same class. Otherwise return false.

public static boolean isSameClass(Student s, Teacher t){
  return s.getClass() == t.getClass();

b. Write a static method isClass that return true if the object parameter (Student s) is belong to any descendent class of Person. Otherwise return false.

public static boolean isBelongDescendent (Student s){
  return (s instanceOf Person);

2. Define a class Organism. 
The class contains the initial size of the organism and the growth rate. 
Create a constructor to initialize the instance variables. 
Then, define a class Animal. 
Animal is an organism that has extra instance variable which is the amount of eating need. 
Create a constructor to initialize the instance variable and a method to display the Animal instance variables.

public class Organism {
  protected double organismSize, growthRate;
  
  public Organism(double n1, double n2){
    orgranismSize = n1;
    growthRate = n2;
  }
}

public class Animal extends Organism{
  private double eatingNeed;
  
  public Animal(double n1, double n2, double n3){
    super(n1, n2);
    eatingNeed = n3;
  }

  public String toString(){
    return “Animal ” +  “\nSize : ” + organismSize + “\nGrowth Rate : ” + growthRate + “\nAmount of eating needed : ” + eatingNeed ;
	}
}

3. Define a class PaySystem. 
The class consists of the payrate per hour and the number of hours. 
The class also contains a method to return the total pay for a given amount of hours and a method to display the total payment. 
Derive a class RegularPay from PaySystem that has a constructor and did not override any base methods. 
Derived a class SpecialPay from PaySystem that override the base method and return the total pay plus 30% commission.

public class PaySystem{
  protected double payratePerHour;
  protected int hours;
  
  public PaySystem(double p, int h){
    this.payratePerHour = p;
    this.hours = h;
  }
  
  public getTotalPay(double p, int h){
    double totalPay = p * h;
    return totalPayl
  }
  
  public void printTotalPay{
    System.out.println(“The total pay is: ” +getTotalPay(payratePerHour, hours));
	}
}

public class RegularPay extends PaySystem{
	public RegularPay(){
	}
}

public class SpecialPay extends PaySystem{
	public double totalPay(double p, int h){
		double totalPay = p * h;
		return totalPay = totalPay *1.3;
	}

	public void printTotalPay(){
		System.out.println(“The total pay is : ” + getTotalPay(payratePerHours, hours));
	}
}


4. Define a class PurchaseSystem. 
The class consists of product code, unit price, quantity and total price. 
Besides the class consists of a method to compute the total price and a display method. 
Derived a class SugarPurchase from PurchaseSystem. 
This new class add a sugar weight attributed and override the method to compute the total price as unit price * quantity* sugar weight.

public class PurchaseSystem{  //class
  private double unitPrice;   //instance variables
  private int quantity;
  private String productCode;
  protected double totalPrice;
  
  public PurchaseSystem(String pc, double p, int q){ //Constructor
    productCode = pc;
    unitPrice = p;
    quantity = q;
  }
  
  public void compute(){  //method
    totalPrice = unitPrice * quantity;
  }
  
  public void display(){//method
    System.out.println("Product Code: " + productCode);
    System.out.println("Quantity " + quantity);
    System.out.println("Unit Price: " + unitPrice);
    System.out.println("Total Price: " + totalPrice);
  }
}

public class SugarPurchase extends Purchase System{
  
  private double weight;  //instance variable
  
  public SugarPurchase(String pc, double p, int q, double w){ //Constructor
    super(pc, p, q);
    weight = w;
  }

  public void compute(){  //method
    super.compute();
    totalPrice *= weight;
  }
}
